function lattice = collide_lattice(lattice, frequency_relaxation)
	
    % 1
	lattice_velocity_x = lattice{2};
	lattice_velocity_y = lattice{3};
	lattice_distribution = lattice{1};
	size_lattice = size(lattice_distribution(:, :, 1));
	number_lines_lattice = size_lattice(1);
	number_columns_lattice = size_lattice(2);
	number_directions_D2Q9 = 9;

	%% 2 - Lattice properties for the D2Q9 model
	number_directions_D2Q9 = 9;
	velocity_weight_0 = 16/36.;
	velocity_weight_1 = 4/36.; 
	velocity_weight_2 = 1/36.; % lattice weights
	coefficients_equilibrium(1) = 3.;
	coefficients_equilibrium(2) = 4.5;
	coefficients_equilibrium(3) = 1.5; % coef. of the lattice_distribution equil.
	density_total = sum(lattice_distribution,3);

	%% 3 - Determining the relaxation functions for each direction
    lattice_relaxation = zeros(number_lines_lattice, number_columns_lattice, number_directions_D2Q9);
	lattice_velocity_xsq = lattice_velocity_x.^2; 
    lattice_velocity_ysq = lattice_velocity_y.^2; 
    usq = lattice_velocity_xsq + lattice_velocity_ysq;
    lattice_relaxation(:,:,1)= velocity_weight_1*density_total.* ... 
    (1 + coefficients_equilibrium(1)*lattice_velocity_x + ... 
    coefficients_equilibrium(2).*lattice_velocity_xsq - ... 
    coefficients_equilibrium(3)*usq);
    lattice_relaxation(:,:,2)= velocity_weight_1*density_total.* ... 
    (1 + coefficients_equilibrium(1)*lattice_velocity_y + ... 
    coefficients_equilibrium(2)*lattice_velocity_ysq - ... 
    coefficients_equilibrium(3)*usq);
    lattice_relaxation(:,:,3)= velocity_weight_1*density_total.* ... 
    (1 - coefficients_equilibrium(1)*lattice_velocity_x + ... 
    coefficients_equilibrium(2)*lattice_velocity_xsq - ... 
    coefficients_equilibrium(3)*usq);
    lattice_relaxation(:,:,4) = velocity_weight_1*density_total.* ... 
    (1 - coefficients_equilibrium(1)*lattice_velocity_y + ... 
    coefficients_equilibrium(2)*lattice_velocity_ysq - ... 
    coefficients_equilibrium(3)*usq);
    lattice_relaxation(:,:,5) = velocity_weight_2*density_total.* ... 
    (1 + coefficients_equilibrium(1)*(+lattice_velocity_x+lattice_velocity_y) + ... 
    coefficients_equilibrium(2)*(+lattice_velocity_x+lattice_velocity_y).^2 - ... 
    coefficients_equilibrium(3).*usq);
    lattice_relaxation(:,:,6) = velocity_weight_2*density_total.* ... 
    (1 +coefficients_equilibrium(1)*(-lattice_velocity_x+lattice_velocity_y) + ... 
    coefficients_equilibrium(2)*(-lattice_velocity_x+lattice_velocity_y).^2 - ... 
    coefficients_equilibrium(3).*usq);
    lattice_relaxation(:,:,7) = velocity_weight_2*density_total.* ... 
    (1 +coefficients_equilibrium(1)*(-lattice_velocity_x-lattice_velocity_y) + ... 
    coefficients_equilibrium(2)*(-lattice_velocity_x-lattice_velocity_y).^2 - ... 
    coefficients_equilibrium(3).*usq);
    lattice_relaxation(:,:,8) = velocity_weight_2*density_total.* ... 
    (1 +coefficients_equilibrium(1)*(+lattice_velocity_x-lattice_velocity_y) + ... 
    coefficients_equilibrium(2)*(+lattice_velocity_x-lattice_velocity_y).^2 - ... 
    coefficients_equilibrium(3).*usq);
    lattice_relaxation(:,:,9) = velocity_weight_0*density_total.* ... 
    (1 - coefficients_equilibrium(3)*usq);

    %% 4 - Collision (relaxation) step
    lattice_distribution = (1-frequency_relaxation)*lattice_distribution + frequency_relaxation*lattice_relaxation;
    lattice{1} = lattice_distribution;