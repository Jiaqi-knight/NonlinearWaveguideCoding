# Autogenerated with SMOP 
from smop.core import *
# 

    
@function
def computeshearratetensor3D(N=None,Q=None,feq=None,f=None,rho=None,tau=None,scheme=None,*args,**kwargs):
    varargin = computeshearratetensor3D.varargin
    nargin = computeshearratetensor3D.nargin

    ##
#        Project: Fluid - structure interaction on deformable surfaces
#         Author: Luca Di Stasio
#    Institution: ETH Zrich
#                 Institute for Building Materials
# Research group: Computational Physics for Engineering Materials
#        Version: 0.1
#  Creation date: May 30th, 2014
#    Last update: June 24th, 2014
    
    #    Description: 
#          Input: 
#         Output:
    
    ##
    
    S=zeros(N,6)
    for i in arange(1,Q).reshape(-1):
        S[:,1]=S[:,1] + dot(dot((f[:,i] - feq[:,i]),scheme[i,1]),scheme[i,1])
        S[:,2]=S[:,2] + dot(dot((f[:,i] - feq[:,i]),scheme[i,2]),scheme[i,2])
        S[:,3]=S[:,3] + dot(dot((f[:,i] - feq[:,i]),scheme[i,3]),scheme[i,3])
        S[:,4]=S[:,4] + dot(dot((f[:,i] - feq[:,i]),scheme[i,1]),scheme[i,2])
        S[:,5]=S[:,5] + dot(dot((f[:,i] - feq[:,i]),scheme[i,1]),scheme[i,3])
        S[:,6]=S[:,6] + dot(dot((f[:,i] - feq[:,i]),scheme[i,2]),scheme[i,3])
    
    S[:,1]=multiply(- (3.0 / (dot(2,tau[:,1]))),S[:,1]) / rho[:,1]
    S[:,2]=multiply(- (3.0 / (dot(2,tau[:,1]))),S[:,2]) / rho[:,1]
    S[:,3]=multiply(- (3.0 / (dot(2,tau[:,1]))),S[:,3]) / rho[:,1]
    S[:,4]=multiply(- (3.0 / (dot(2,tau[:,1]))),S[:,4]) / rho[:,1]
    S[:,5]=multiply(- (3.0 / (dot(2,tau[:,1]))),S[:,5]) / rho[:,1]
    S[:,6]=multiply(- (3.0 / (dot(2,tau[:,1]))),S[:,6]) / rho[:,1]
    return S