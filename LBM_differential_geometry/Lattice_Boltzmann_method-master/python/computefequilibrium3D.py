# Autogenerated with SMOP 
from smop.core import *
# 

    
@function
def computefequilibrium3D(N=None,Q=None,rho=None,u=None,reciprocalmetriccoefficients=None,scheme=None,invcssq=None,*args,**kwargs):
    varargin = computefequilibrium3D.varargin
    nargin = computefequilibrium3D.nargin

    ##
#        Project: Fluid - structure interaction on deformable surfaces
#         Author: Luca Di Stasio
#    Institution: ETH Zrich
#                 Institute for Building Materials
# Research group: Computational Physics for Engineering Materials
#        Version: 0.1
#  Creation date: May 30th, 2014
#    Last update: June 3rd, 2014
    
    #    Description: 
#          Input: 
#         Output:
    
    ##
    
    feq=zeros(N,Q)
    G11=reciprocalmetriccoefficients[:,1]
    G22=reciprocalmetriccoefficients[:,2]
    G33=reciprocalmetriccoefficients[:,3]
    G12=reciprocalmetriccoefficients[:,4]
    G13=reciprocalmetriccoefficients[:,5]
    G23=reciprocalmetriccoefficients[:,6]
    for i in arange(1,Q).reshape(-1):
        feq[:,i]=multiply(multiply(scheme[i,4],rho[:,1]),(dot(0.5,5) + multiply(dot(2,(multiply(scheme[i,1],u[:,1]) + multiply(scheme[i,2],u[:,2]) + multiply(scheme[i,3],u[:,3]))),invcssq) + multiply(dot(0.5,(multiply(multiply(scheme[i,1],G11),scheme[i,1]) + multiply(multiply(scheme[i,1],G12),scheme[i,2]) + multiply(multiply(scheme[i,1],G13),scheme[i,3]) + multiply(multiply(scheme[i,2],G12),scheme[i,1]) + multiply(multiply(scheme[i,2],G22),scheme[i,2]) + multiply(multiply(scheme[i,2],G23),scheme[i,3]) + multiply(multiply(scheme[i,3],G13),scheme[i,1]) + multiply(multiply(scheme[i,3],G23),scheme[i,2]) + multiply(multiply(scheme[i,3],G33),scheme[i,3]))),invcssq) + multiply(dot(- 0.5,(multiply(scheme[i,1],scheme[i,1]) + multiply(scheme[i,2],scheme[i,2]) + multiply(scheme[i,3],scheme[i,3]))),invcssq) + multiply(multiply(dot(0.5,((multiply(scheme[i,1],u[:,1]) + multiply(scheme[i,2],u[:,2]) + multiply(scheme[i,3],u[:,3])) ** 2)),invcssq),invcssq) + dot(- 0.5,(G11 + G22 + G33)) + multiply(dot(- 0.5,(multiply(u[:,1],u[:,1]) + multiply(u[:,2],u[:,2]) + multiply(u[:,3],u[:,3]))),invcssq) + multiply(multiply(multiply(((multiply(scheme[i,1],u[:,1]) + multiply(scheme[i,2],u[:,2]) + multiply(scheme[i,3],u[:,3])) ** 3),invcssq),invcssq),invcssq) / 6 + multiply(multiply(multiply(dot(0.5,(multiply(scheme[i,1],u[:,1]) + multiply(scheme[i,2],u[:,2]) + multiply(scheme[i,3],u[:,3]))),(dot(multiply(scheme[i,1],G11),scheme[i,1]) + dot(multiply(scheme[i,1],G12),scheme[i,2]) + dot(multiply(scheme[i,1],G13),scheme[i,3]) + dot(multiply(scheme[i,2],G12),scheme[i,1]) + dot(multiply(scheme[i,2],G22),scheme[i,2]) + dot(multiply(scheme[i,2],G23),scheme[i,3]) + dot(multiply(scheme[i,3],G13),scheme[i,1]) + dot(multiply(scheme[i,3],G23),scheme[i,2]) + dot(multiply(scheme[i,3],G33),scheme[i,3]) - multiply(scheme[i,1],scheme[i,1]) - multiply(scheme[i,2],scheme[i,2]) - multiply(scheme[i,3],scheme[i,3]))),invcssq),invcssq) + multiply(multiply(multiply(dot(- 0.5,(multiply(scheme[i,1],u[:,1]) + multiply(scheme[i,2],u[:,2]) + multiply(scheme[i,3],u[:,3]))),(multiply(u[:,1],u[:,1]) + multiply(u[:,2],u[:,2]) + multiply(u[:,3],u[:,3]))),invcssq),invcssq) + multiply(multiply(dot(- 0.5,(multiply(scheme[i,1],u[:,1]) + multiply(scheme[i,2],u[:,2]) + multiply(scheme[i,3],u[:,3]))),(G11 + G22 + G33 - 3)),invcssq) + multiply(- (multiply(multiply(u[:,1],G11),scheme[i,1]) + multiply(multiply(u[:,1],G12),scheme[i,2]) + multiply(multiply(u[:,1],G13),scheme[i,3]) + multiply(multiply(u[:,2],G12),scheme[i,1]) + multiply(multiply(u[:,2],G22),scheme[i,2]) + multiply(multiply(u[:,2],G23),scheme[i,3]) + multiply(multiply(u[:,3],G13),scheme[i,1]) + multiply(multiply(u[:,3],G23),scheme[i,2]) + multiply(multiply(u[:,3],G33),scheme[i,3])),invcssq)))
    
    return feq