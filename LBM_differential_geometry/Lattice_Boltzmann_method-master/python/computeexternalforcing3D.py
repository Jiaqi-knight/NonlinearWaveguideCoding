# Autogenerated with SMOP 
from smop.core import *
# 

    
@function
def computeexternalforcing3D(N=None,Q=None,contravariantbase=None,F=None,*args,**kwargs):
    varargin = computeexternalforcing3D.varargin
    nargin = computeexternalforcing3D.nargin

    ##
#        Project: Fluid - structure interaction on deformable surfaces
#         Author: Luca Di Stasio
#    Institution: ETH Zrich
#                 Institute for Building Materials
# Research group: Computational Physics for Engineering Materials
#        Version: 0.1
#  Creation date: May 30th, 2014
#    Last update: June 3rd, 2014
    
    #    Description: 
#          Input: 
#         Output:
    
    ##
    
    G1=contravariantbase[:,1:3]
    G2=contravariantbase[:,4:6]
    G3=contravariantbase[:,7:9]
    Nforces=round(size(F,2) / 3)
    Fext=zeros(N,dot(3,Q))
    for i in arange(1,Q).reshape(-1):
        Fext[:,dot(3,(i - 1)) + 1]=0
        Fext[:,dot(3,(i - 1)) + 2]=0
        Fext[:,dot(3,(i - 1)) + 3]=0
        for j in arange(1,Nforces).reshape(-1):
            Fext[:,dot(3,(i - 1)) + 1]=Fext[:,dot(3,(i - 1)) + 1] + sum(multiply(F[:,dot(3,(j - 1)) + 1:dot(3,(j - 1)) + 3],G1),2)
            Fext[:,dot(3,(i - 1)) + 2]=Fext[:,dot(3,(i - 1)) + 2] + sum(multiply(F[:,dot(3,(j - 1)) + 1:dot(3,(j - 1)) + 3],G2),2)
            Fext[:,dot(3,(i - 1)) + 3]=Fext[:,dot(3,(i - 1)) + 3] + sum(multiply(F[:,dot(3,(j - 1)) + 1:dot(3,(j - 1)) + 3],G3),2)
    
    return Fext