function[mesh]=structHexaedron(x0,y0,z0,lx,ly,lz,Nx,Ny,Nz)

%%
%==============================================================================
% Copyright (c) 2016 Université de Lorraine & Luleå tekniska universitet
% Author: Luca Di Stasio <luca.distasio@gmail.com>
%                        <luca.distasio@ingpec.eu>
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
% 
% 
% Redistributions of source code must retain the above copyright
% notice, this list of conditions and the following disclaimer.
% Redistributions in binary form must reproduce the above copyright
% notice, this list of conditions and the following disclaimer in
% the documentation and/or other materials provided with the distribution
% Neither the name of the Université de Lorraine or Luleå tekniska universitet
% nor the names of its contributors may be used to endorse or promote products
% derived from this software without specific prior written permission.
% 
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
% POSSIBILITY OF SUCH DAMAGE.
%==============================================================================
%
%  DESCRIPTION
%  
%  A function to generate meshed hexaedrons 
%
%  Input: x0 - scalar - x-coordinate of center
%         y0 - scalar - y-coordinate of center
%         z0 - scalar - z-coordinate of center
%         lx - scalar - Side length in x-direction
%         ly - scalar - Side length in y-direction
%         lz - scalar - Side length in z-direction
%         Nx - scalar - Number of ELEMENTS in x-direction
%         Ny - scalar - Number of ELEMENTS in y-direction
%         Nz - scalar - Number of ELEMENTS in z-direction
%
%  Output: mesh - (Nx+1)*(Ny+1)*(Nz+1) x 3 matrix - mesh nodes ordered through helical
%          indexing
%
%%

mesh = zeros((Nx+1)*(Ny+1)*(Nz+1),3);

deltax = lx/Nx;
deltay = ly/Ny;
deltaz = lz/Nz;

xs = ((x0-0.5*lx):deltax:(x0+0.5*lx))';
xys

for j=1:Ny+1
    mesh((j-1)*(Nx+1)+1:j*(Nx+1),1) = xs;
    mesh((j-1)*(Nx+1)+1:j*(Nx+1),2) = ((y0-0.5*ly)+deltay*(j-1))*ones((Nx+1),1);
end

return