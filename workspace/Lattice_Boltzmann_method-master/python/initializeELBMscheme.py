# Autogenerated with SMOP 
from smop.core import *
# 

    
@function
def initializeELBMscheme(D=None,Q=None,nongaussianflag=None,*args,**kwargs):
    varargin = initializeELBMscheme.varargin
    nargin = initializeELBMscheme.nargin

    ##
#        Project: Fluid - structure interaction on deformable surfaces
#         Author: Luca Di Stasio
#    Institution: ETH Zrich
#                 Institute for Building Materials
# Research group: Computational Physics for Engineering Materials
#        Version: 0.1
#  Creation date: May 22nd, 2014
#    Last update: May 26th, 2014
    
    #    Description: 
#          Input: 
#         Output:
    
    ##
    
    if nargin == 2:
        nongaussianflag=0
    
    T0=0
    cs=sqrt(T0)
    cssq=copy(T0)
    scheme=zeros(Q,D + 2)
    if 1 == D:
        if 4 == Q:
            m=1
            n=4
            Wm=((m ** 2 - dot(5,n ** 2) + sqrt(m ** 4 - dot(dot(10,n ** 2),m ** 2) + n ** 4)) / (dot(12,(m ** 2 - n ** 2))))
            Wn=((dot(5,m ** 2) - n ** 2 - sqrt(m ** 4 - dot(dot(10,n ** 2),m ** 2) + n ** 4)) / (dot(12,(m ** 2 - n ** 2))))
            T0=(m ** 2 + n ** 2 + sqrt(m ** 4 - dot(dot(10,n ** 2),m ** 2) + n ** 4)) / 6
            cs=sqrt(T0)
            cssq=copy(T0)
            scheme=matlabarray(cat([m,Wm,1],[- m,Wm,1],[n,Wn,4],[- n,Wn,4]))
        else:
            if 5 == Q:
                if nongaussianflag:
                    W0=0.074464207985
                    W1=0.418585412256
                    W3=0.0441824837512
                    T0=1.63245553203
                    cs=sqrt(T0)
                    cssq=copy(T0)
                    scheme=matlabarray(cat([0,W0,0],[1,W1,1],[- 1,W1,1],[3,W3,3],[- 3,W3,3]))
                else:
                    m=1
                    n=3
                    W0=(dot(- 3,m ** 4) - dot(3,n ** 4) + dot(dot(54,m ** 2),n ** 2) + dot((m ** 2 + n ** 2),sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4)))) / (dot(dot(75,m ** 2),n ** 2))
                    Wm=((dot(9,m ** 4) - dot(6,n ** 4) - dot(dot(27,m ** 2),n ** 2) - dot((dot(3,m ** 2) - dot(2,n ** 2)),sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4)))) / (dot(dot(300,m ** 2),(m ** 2 - n ** 2))))
                    Wn=((dot(9,n ** 4) - dot(6,m ** 4) - dot(dot(27,m ** 2),n ** 2) - dot((dot(3,n ** 2) - dot(2,m ** 2)),sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4)))) / (dot(dot(300,n ** 2),(n ** 2 - m ** 2))))
                    T0=(dot(3,m ** 2) + dot(3,n ** 2) - sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4))) / 30
                    cs=sqrt(T0)
                    cssq=copy(T0)
                    scheme=matlabarray(cat([0,W0,0],[m,Wm,m],[- m,Wm,m],[n,Wn,n],[- n,Wn,n]))
            else:
                if 7 == Q:
                    m=2
                    n=3
                    msq=m ** 2
                    nsq=n ** 2
                    mfp=m ** 4
                    nfp=n ** 4
                    r=n ** 2 + 1
                    a=m ** 6
                    b=dot(r,mfp)
                    c=dot((dot(11,nfp) - dot(104,nsq) + 11),msq)
                    d=dot(r,(dot(10,nfp) - dot(43,nsq) + 10))
                    h=msq + nsq + 1
                    e=dot(4,(dot(945,(dot(r,msq) + nsq)) - dot(225,(h ** 2))) ** 3)
                    f=dot(455625,(dot(10,a) - dot(dot(33,r),mfp) + dot((dot(- 33,nfp) + dot(312,nsq) - 33),msq) + dot(r,(dot(10,nfp) - dot(43,nsq) + 10))) ** 2)
                    g=e + f
                    i=dot(r,msq) + nsq
                    l=dot(msq,nsq)
                    o=msq + nsq
                    q=msq + 1
                    alpha=dot(- 250,a) + dot(825,b) + dot(75,c) - dot(25,d) + dot((1 / 27),sqrt(g))
                    beta=dot(- 50,a) + dot(165,b) + dot(15,c) - dot(5,d) + dot((1 / 135),sqrt(g))
                    gamma=dot(5,mfp) - dot(dot(11,r),msq) + dot(5,nfp) - dot(11,nsq) + 5
                    T0=(dot(10,h) - dot((2 ** (2 / 3)),(alpha ** (1 / 3))) - dot(dot(dot(dot(2,(2 ** (1 / 3))),(5 ** (2 / 3))),gamma),(beta ** (- 1 / 3)))) / 210
                    T0sq=T0 ** 2
                    T0tp=T0 ** 3
                    s=dot(- 15,T0tp) + dot(dot(3,h),T0sq) - dot(i,T0) + l
                    W0=s / l
                    t=dot((T0 - 1),msq) - dot(3,T0sq) + T0
                    den=dot(dot(2,(msq - 1)),t)
                    aleph=l + dot(3,T0sq) - dot(o,T0)
                    beth=msq + dot(15,T0sq) - dot(dot(3,q),T0)
                    gimel=dot(- 15,T0tp) + dot(dot(3,h),T0sq) - dot(i,T0) + l
                    daleth=dot((T0 - 1),nsq) - dot(3,T0sq) + T0
                    he=nsq + dot(15,T0sq) - dot(dot(3,r),T0)
                    tet=dot(daleth,msq) + dot(T0,he)
                    firstaddendW1=(dot(dot(dot(T0,aleph),beth),gimel)) / (dot(dot(nsq,(nsq - 1)),tet))
                    secondaddendW1=(dot(dot((msq - dot(3,T0)),T0),s)) / nsq
                    W1=(firstaddendW1 - secondaddendW1) / den
                    firstaddendWm=(dot(dot(T0,(dot(3,T0) - 1)),s)) / l
                    chet=msq + dot(15,T0sq) - dot(dot(3,q),T0)
                    waw=dot(dot(dot(T0,t),chet),s)
                    zajin=dot(dot(dot((m - n),nsq),(m + n)),tet)
                    secondaddendWm=waw / zajin
                    Wm=- (firstaddendWm + secondaddendWm) / den
                    Wn=(dot(dot(T0,chet),s)) / (dot(dot(dot(dot(dot(2,(m - n)),nsq),(m + n)),(nsq - 1)),tet))
                    cs=sqrt(T0)
                    cssq=copy(T0)
                    scheme=matlabarray(cat([0,W0,0],[1,W1,1],[- 1,W1,1],[m,Wm,m],[- m,Wm,m],[n,Wn,n],[- n,Wn,n]))
                else:
                    if 9 == Q:
                        if nongaussianflag:
                            T0=2.17538238657
                            W0=0.167240236272
                            W1=0.303154150434
                            W2=0.0533029405349
                            W3=0.0579215307299
                            W5=0.00200126016577
                            scheme=matlabarray(cat([0,W0,0],[1,W1,1],[- 1,W1,1],[2,W2,2],[- 2,W2,2],[3,W3,3],[- 3,W3,3],[5,W5,5],[- 5,W5,5]))
                        else:
                            m=5
                            p=copy(m)
                            psq=p ** 2
                            T0=0.756080852595
                            denW0=dot(36,psq)
                            coeffT0W0=dot(3,(dot(dot(7,T0),(dot(dot(5,(T0 - 2)),T0) + 7)) - 12))
                            coeffpsqW0=dot(T0,(dot(dot(3,(14 - dot(5,T0))),T0) - 49)) + 36
                            W0=(dot(coeffpsqW0,psq) + dot(coeffT0W0,T0)) / denW0
                            denW1=dot(16,(psq - 1))
                            coeffT0W1=dot(dot(5,(13 - dot(7,T0))),T0) - 36
                            coeffpsqW1=dot((dot(5,T0) - 13),T0) + 12
                            W1=dot(T0,(dot(coeffpsqW1,psq) + dot(coeffT0W1,T0))) / denW1
                            denW2=dot(40,(psq - 4))
                            coeffT0W2=dot(dot(5,(dot(7,T0) - 10)),T0) + 9
                            coeffpsqW2=dot(dot(- 5,(T0 - 2)),T0) - 3
                            W2=dot(T0,(dot(coeffpsqW2,psq) + dot(coeffT0W2,T0))) / denW2
                            denW3=dot(720,(psq - 9))
                            coeffT0W3=dot(- 3,(dot(dot(5,(dot(7,T0) - 5)),T0) + 4))
                            coeffpsqW3=dot(dot(15,(T0 - 1)),T0) + 4
                            W3=dot(T0,(dot(coeffpsqW3,psq) + dot(coeffT0W3,T0))) / denW3
                            denWp=dot(dot(2,psq),(dot(psq,(psq - 7) ** 2) - 36))
                            numWp=dot(dot(7,T0),(dot(dot(5,(T0 - 2)),T0) + 7)) - 12
                            Wp=dot(dot(3,T0),numWp) / denWp
                            cs=sqrt(T0)
                            cssq=copy(T0)
                            scheme=matlabarray(cat([0,W0,0],[1,W1,1],[- 1,W1,1],[2,W2,2],[- 2,W2,2],[3,W3,3],[- 3,W3,3],[p,Wp,p],[- p,Wp,p]))
    else:
        if 2 == D:
            if 25 == Q:
                if nongaussianflag:
                    W0=0.074464207985
                    W1=0.418585412256
                    W3=0.0441824837512
                    T0=1.63245553203
                    cs=sqrt(T0)
                    cssq=copy(T0)
                    scheme1D=matlabarray(cat([0,W0,0],[1,W1,1],[- 1,W1,1],[3,W3,3],[- 3,W3,3]))
                    scheme,QD25=constructentropicDnscheme(2,scheme1D,nargout=2)
                else:
                    m=1
                    n=3
                    W0=(dot(- 3,m ** 4) - dot(3,n ** 4) + dot(dot(54,m ** 2),n ** 2) + dot((m ** 2 + n ** 2),sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4)))) / (dot(dot(75,m ** 2),n ** 2))
                    Wm=((dot(9,m ** 4) - dot(6,n ** 4) - dot(dot(27,m ** 2),n ** 2) - dot((dot(3,m ** 2) - dot(2,n ** 2)),sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4)))) / (dot(dot(300,m ** 2),(m ** 2 - n ** 2))))
                    Wn=((dot(9,n ** 4) - dot(6,m ** 4) - dot(dot(27,m ** 2),n ** 2) - dot((dot(3,n ** 2) - dot(2,m ** 2)),sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4)))) / (dot(dot(300,n ** 2),(n ** 2 - m ** 2))))
                    T0=(dot(3,m ** 2) + dot(3,n ** 2) - sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4))) / 30
                    cs=sqrt(T0)
                    cssq=copy(T0)
                    scheme1D=matlabarray(cat([0,W0,0],[m,Wm,m],[- m,Wm,m],[n,Wn,n],[- n,Wn,n]))
                    scheme,QD25=constructentropicDnscheme(2,scheme1D,nargout=2)
        else:
            if 3 == D:
                if 15 == Q:
                    if nongaussianflag:
                        W0=0.074464207985
                        W1=0.418585412256
                        W3=0.0441824837512
                        T0=1.63245553203
                        cs=sqrt(T0)
                        cssq=copy(T0)
                        scheme1D=matlabarray(cat([0,W0,0],[1,W1,1],[- 1,W1,1],[3,W3,3],[- 3,W3,3]))
                        pruneflag=1
                        prune=matlabarray(cat([2],[9],[10],[11],[18],[19],[27]))
                        scheme,QD15=constructentropicDnscheme(3,scheme1D,pruneflag,prune,nargout=2)
                    else:
                        m=1
                        n=3
                        W0=(dot(- 3,m ** 4) - dot(3,n ** 4) + dot(dot(54,m ** 2),n ** 2) + dot((m ** 2 + n ** 2),sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4)))) / (dot(dot(75,m ** 2),n ** 2))
                        Wm=((dot(9,m ** 4) - dot(6,n ** 4) - dot(dot(27,m ** 2),n ** 2) - dot((dot(3,m ** 2) - dot(2,n ** 2)),sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4)))) / (dot(dot(300,m ** 2),(m ** 2 - n ** 2))))
                        Wn=((dot(9,n ** 4) - dot(6,m ** 4) - dot(dot(27,m ** 2),n ** 2) - dot((dot(3,n ** 2) - dot(2,m ** 2)),sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4)))) / (dot(dot(300,n ** 2),(n ** 2 - m ** 2))))
                        T0=(dot(3,m ** 2) + dot(3,n ** 2) - sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4))) / 30
                        cs=sqrt(T0)
                        cssq=copy(T0)
                        scheme1D=matlabarray(cat([0,W0,0],[m,Wm,m],[- m,Wm,m],[n,Wn,n],[- n,Wn,n]))
                        pruneflag=1
                        prune=matlabarray(cat([2],[9],[10],[11],[18],[19],[27]))
                        scheme,QD15=constructentropicDnscheme(3,scheme1D,pruneflag,prune,nargout=2)
                else:
                    if 19 == Q:
                        if nongaussianflag:
                            W0=0.074464207985
                            W1=0.418585412256
                            W3=0.0441824837512
                            T0=1.63245553203
                            cs=sqrt(T0)
                            cssq=copy(T0)
                            scheme1D=matlabarray(cat([0,W0,0],[1,W1,1],[- 1,W1,1],[3,W3,3],[- 3,W3,3]))
                            pruneflag=1
                            prune=matlabarray(cat([3],[9],[10],[11],[18],[19],[27]))
                            scheme,QD15=constructentropicDnscheme(3,scheme1D,pruneflag,prune,nargout=2)
                        else:
                            m=1
                            n=3
                            W0=(dot(- 3,m ** 4) - dot(3,n ** 4) + dot(dot(54,m ** 2),n ** 2) + dot((m ** 2 + n ** 2),sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4)))) / (dot(dot(75,m ** 2),n ** 2))
                            Wm=((dot(9,m ** 4) - dot(6,n ** 4) - dot(dot(27,m ** 2),n ** 2) - dot((dot(3,m ** 2) - dot(2,n ** 2)),sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4)))) / (dot(dot(300,m ** 2),(m ** 2 - n ** 2))))
                            Wn=((dot(9,n ** 4) - dot(6,m ** 4) - dot(dot(27,m ** 2),n ** 2) - dot((dot(3,n ** 2) - dot(2,m ** 2)),sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4)))) / (dot(dot(300,n ** 2),(n ** 2 - m ** 2))))
                            T0=(dot(3,m ** 2) + dot(3,n ** 2) - sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4))) / 30
                            cs=sqrt(T0)
                            cssq=copy(T0)
                            scheme1D=matlabarray(cat([0,W0,0],[m,Wm,m],[- m,Wm,m],[n,Wn,n],[- n,Wn,n]))
                            pruneflag=1
                            prune=matlabarray(cat([3],[9],[10],[11],[18],[19],[27]))
                            scheme,QD15=constructentropicDnscheme(3,scheme1D,pruneflag,prune,nargout=2)
                    else:
                        if 27 == Q:
                            if nongaussianflag:
                                W0=0.074464207985
                                W1=0.418585412256
                                W3=0.0441824837512
                                T0=1.63245553203
                                cs=sqrt(T0)
                                cssq=copy(T0)
                                scheme1D=matlabarray(cat([0,W0,0],[1,W1,1],[- 1,W1,1],[3,W3,3],[- 3,W3,3]))
                                pruneflag=1
                                prune=matlabarray(cat([9],[10],[11],[18],[19],[27]))
                                scheme,QD27=constructentropicDnscheme(3,scheme1D,pruneflag,prune,nargout=2)
                            else:
                                m=1
                                n=3
                                W0=(dot(- 3,m ** 4) - dot(3,n ** 4) + dot(dot(54,m ** 2),n ** 2) + dot((m ** 2 + n ** 2),sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4)))) / (dot(dot(75,m ** 2),n ** 2))
                                Wm=((dot(9,m ** 4) - dot(6,n ** 4) - dot(dot(27,m ** 2),n ** 2) - dot((dot(3,m ** 2) - dot(2,n ** 2)),sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4)))) / (dot(dot(300,m ** 2),(m ** 2 - n ** 2))))
                                Wn=((dot(9,n ** 4) - dot(6,m ** 4) - dot(dot(27,m ** 2),n ** 2) - dot((dot(3,n ** 2) - dot(2,m ** 2)),sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4)))) / (dot(dot(300,n ** 2),(n ** 2 - m ** 2))))
                                T0=(dot(3,m ** 2) + dot(3,n ** 2) - sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4))) / 30
                                cs=sqrt(T0)
                                cssq=copy(T0)
                                scheme1D=matlabarray(cat([0,W0,0],[m,Wm,m],[- m,Wm,m],[n,Wn,n],[- n,Wn,n]))
                                pruneflag=1
                                prune=matlabarray(cat([9],[10],[11],[18],[19],[27]))
                                scheme,QD27=constructentropicDnscheme(3,scheme1D,pruneflag,prune,nargout=2)
                        else:
                            if 41 == Q:
                                if nongaussianflag:
                                    W0=0.074464207985
                                    W1=0.418585412256
                                    W3=0.0441824837512
                                    T0=1.63245553203
                                    cs=sqrt(T0)
                                    cssq=copy(T0)
                                    scheme1D=matlabarray(cat([0,W0,0],[1,W1,1],[- 1,W1,1],[3,W3,3],[- 3,W3,3]))
                                    pruneflag=1
                                    prune=matlabarray(cat([10],[11],[18],[19]))
                                    scheme,QD41=constructentropicDnscheme(3,scheme1D,pruneflag,prune,nargout=2)
                                else:
                                    m=1
                                    n=3
                                    W0=(dot(- 3,m ** 4) - dot(3,n ** 4) + dot(dot(54,m ** 2),n ** 2) + dot((m ** 2 + n ** 2),sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4)))) / (dot(dot(75,m ** 2),n ** 2))
                                    Wm=((dot(9,m ** 4) - dot(6,n ** 4) - dot(dot(27,m ** 2),n ** 2) - dot((dot(3,m ** 2) - dot(2,n ** 2)),sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4)))) / (dot(dot(300,m ** 2),(m ** 2 - n ** 2))))
                                    Wn=((dot(9,n ** 4) - dot(6,m ** 4) - dot(dot(27,m ** 2),n ** 2) - dot((dot(3,n ** 2) - dot(2,m ** 2)),sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4)))) / (dot(dot(300,n ** 2),(n ** 2 - m ** 2))))
                                    T0=(dot(3,m ** 2) + dot(3,n ** 2) - sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4))) / 30
                                    cs=sqrt(T0)
                                    cssq=copy(T0)
                                    scheme1D=matlabarray(cat([0,W0,0],[m,Wm,m],[- m,Wm,m],[n,Wn,n],[- n,Wn,n]))
                                    pruneflag=1
                                    prune=matlabarray(cat([10],[11],[18],[19]))
                                    scheme,QD41=constructentropicDnscheme(3,scheme1D,pruneflag,prune,nargout=2)
                                    W00=dot(2,(5045 - dot(1507,sqrt(10)))) / 2025
                                    W100=37 / (dot(5,sqrt(10))) - 91 / 40
                                    W110=(55 - dot(17,sqrt(10))) / 50
                                    W111=(dot(233,sqrt(10)) - 730) / 1600
                                    W300=(295 - dot(92,sqrt(10))) / 16200
                                    W333=(130 - dot(41,sqrt(10))) / 129600
                                    weights=matlabarray(cat([dot(W00,ones(1,1))],[dot(W100,ones(6,1))],[dot(W110,ones(12,1))],[dot(W111,ones(8,1))],[dot(W300,ones(6,1))],[dot(W333,ones(8,1))]))
                                    scheme[:,end() - 1]=weights
                            else:
                                if 125 == Q:
                                    if nongaussianflag:
                                        W0=0.074464207985
                                        W1=0.418585412256
                                        W3=0.0441824837512
                                        T0=1.63245553203
                                        cs=sqrt(T0)
                                        cssq=copy(T0)
                                        scheme1D=matlabarray(cat([0,W0,0],[1,W1,1],[- 1,W1,1],[3,W3,3],[- 3,W3,3]))
                                        scheme,QD125=constructentropicDnscheme(3,scheme1D,nargout=2)
                                    else:
                                        m=1
                                        n=3
                                        W0=(dot(- 3,m ** 4) - dot(3,n ** 4) + dot(dot(54,m ** 2),n ** 2) + dot((m ** 2 + n ** 2),sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4)))) / (dot(dot(75,m ** 2),n ** 2))
                                        Wm=((dot(9,m ** 4) - dot(6,n ** 4) - dot(dot(27,m ** 2),n ** 2) - dot((dot(3,m ** 2) - dot(2,n ** 2)),sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4)))) / (dot(dot(300,m ** 2),(m ** 2 - n ** 2))))
                                        Wn=((dot(9,n ** 4) - dot(6,m ** 4) - dot(dot(27,m ** 2),n ** 2) - dot((dot(3,n ** 2) - dot(2,m ** 2)),sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4)))) / (dot(dot(300,n ** 2),(n ** 2 - m ** 2))))
                                        T0=(dot(3,m ** 2) + dot(3,n ** 2) - sqrt(dot(9,m ** 4) - dot(dot(42,n ** 2),m ** 2) + dot(9,n ** 4))) / 30
                                        cs=sqrt(T0)
                                        cssq=copy(T0)
                                        scheme1D=matlabarray(cat([0,W0,0],[m,Wm,m],[- m,Wm,m],[n,Wn,n],[- n,Wn,n]))
                                        scheme,QD125=constructentropicDnscheme(3,scheme1D,nargout=2)
    
    invcs=1 / cs
    invcssq=1 / cssq
    return scheme,cs,cssq,invcs,invcssq,T0