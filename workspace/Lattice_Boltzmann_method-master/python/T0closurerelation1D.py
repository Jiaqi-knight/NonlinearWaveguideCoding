# Autogenerated with SMOP 
from smop.core import *
# 

    
@function
def T0closurerelation1D(Q=None,allvelocities=None,*args,**kwargs):
    varargin = T0closurerelation1D.varargin
    nargin = T0closurerelation1D.nargin

    ##
#        Project: Fluid - structure interaction on deformable surfaces
#         Author: Luca Di Stasio
#    Institution: ETH Zrich
#                 Institute for Building Materials
# Research group: Computational Physics for Engineering Materials
#        Version: 0.1
#  Creation date: May 26th, 2014
#    Last update: May 26th, 2014
    
    #    Description: 
#          Input: 
#         Output:
    
    ##
    
    velocities=allvelocities[2:end()]
    b=ones(dot(0.5,(Q - 1)) + 1,1)
    for i in arange(1,dot(0.5,(Q - 1))).reshape(-1):
        b[i + 1]=dot((dot(2,i) + 1),b[i])
    
    M=zeros(size(velocities,1),dot(0.5,(Q - 1)) + 1)
    for i in arange(0,dot(0.5,(Q - 1))).reshape(-1):
        M[:,i + 1]=velocities ** (dot(2,i) + 1)
    
    a=numpy.linalg.solve(M[:,1:end() - 1],M[:,end()])
    a=matlabarray(cat([a],[1]))
    c=multiply(a,b)
    c[1:end() - 1]=- c[1:end() - 1]
    coeff=zeros(size(b,1),1)
    for i in arange(1,size(coeff)).reshape(-1):
        coeff[i,1]=c[size(c,1) - (i - 1),1]
    
    Troots=roots(coeff)
    T=matlabarray([])
    for i in arange(1,size(Troots,1)).reshape(-1):
        if isreal(Troots[i,1]):
            T=matlabarray(cat([T],[Troots[i,1]]))
    
    return T